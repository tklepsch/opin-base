@charset "UTF-8";
/**
* 1. Set default font family to sans-serif.
* 2. Prevent iOS text size adjust after orientation change, without disabling
*    user zoom.
*/
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
* Remove default margin.
*/
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
* Correct `block` display not defined for any HTML5 element in IE 8/9.
* Correct `block` display not defined for `details` or `summary` in IE 10/11
* and Firefox.
* Correct `block` display not defined for `main` in IE 11.
*/
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
* 1. Correct `inline-block` display not defined in IE 8/9.
* 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
*/
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
* Prevent modern browsers from displaying `audio` without controls.
* Remove excess height in iOS 5 devices.
*/
audio:not([controls]) {
  display: none;
  height: 0; }

/**
   * Address `[hidden]` styling not present in IE 8/9/10.
   */
[hidden] {
  display: none; }

/**
* Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
*/
template {
  display: none; }

/* Links
   ========================================================================== */
/**
   * Remove the gray background color from active links in IE 10.
   */
a {
  background-color: transparent; }

/**
* Improve readability when focused and also mouse hovered in all browsers.
*/
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
* Address styling not present in IE 8/9/10/11, Safari, and Chrome.
*/
abbr[title] {
  border-bottom: 1px dotted; }

/**
* Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
*/
/**
* Address styling not present in Safari and Chrome.
*/
dfn {
  font-style: italic; }

/**
* Address variable `h1` font-size and margin within `section` and `article`
* contexts in Firefox 4+, Safari, and Chrome.
*/
h1 {
  font-size: 2em;
  margin: 0.66667em 0; }

/**
   * Address styling not present in IE 8/9.
   */
mark {
  background: #ff0;
  color: #000; }

/**
* Address inconsistent and variable font size in all browsers.
*/
small {
  font-size: 80%; }

/**
* Prevent `sub` and `sup` affecting `line-height` in all browsers.
*/
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
   * Remove border when inside `a` element in IE 8/9/10.
   */
img {
  border: 0; }

/**
   * Correct overflow not hidden in IE 9/10/11.
   */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
   * Address margin not present in IE 8/9 and Safari.
   */
figure {
  margin: 1em 40px; }

/**
* Address differences between Firefox and other browsers.
*/
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  height: 0; }

/**
* Contain overflow in all browsers.
*/
pre {
  overflow: auto; }

/**
* Address odd `em`-unit font size rendering in all browsers.
*/
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
* Known limitation: by default, Chrome and Safari on OS X allow very limited
* styling of `select`, unless a `border` property is set.
*/
/**
* 1. Correct color not being inherited.
*    Known issue: affects color of disabled elements.
* 2. Correct font properties not being inherited.
* 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
*/
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
   * Address `overflow` set to `hidden` in IE 8/9/10/11.
   */
button {
  overflow: visible; }

/**
* Address inconsistent `text-transform` inheritance for `button` and `select`.
* All other form control elements do not inherit `text-transform` values.
* Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
* Correct `select` style inheritance in Firefox.
*/
button,
select {
  text-transform: none; }

/**
* 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
*    and `video` controls.
* 2. Correct inability to style clickable `input` types in iOS.
* 3. Improve usability and consistency of cursor style between image-type
*    `input` and others.
*/
button,
html input[type='button'],
input[type='reset'],
input[type='submit'] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
* Re-set default cursor for disabled elements.
*/
button[disabled],
html input[disabled] {
  cursor: default; }

/**
* Remove inner padding and border in Firefox 4+.
*/
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
* Address Firefox 4+ setting `line-height` on `input` using `!important` in
* the UA stylesheet.
*/
input {
  line-height: normal; }

/**
   * It's recommended that you don't attempt to style these elements.
   * Firefox's implementation doesn't respect box-sizing, padding, or width.
   *
   * 1. Address box sizing set to `content-box` in IE 8/9/10.
   * 2. Remove excess padding in IE 8/9/10.
   */
input[type='checkbox'],
input[type='radio'] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
* Fix the cursor style for Chrome's increment/decrement buttons. For certain
* `font-size` values of the `input`, it causes the cursor style of the
* decrement button to change from `default` to `text`.
*/
input[type='number']::-webkit-inner-spin-button,
input[type='number']::-webkit-outer-spin-button {
  height: auto; }

/**
* 1. Address `appearance` set to `searchfield` in Safari and Chrome.
* 2. Address `box-sizing` set to `border-box` in Safari and Chrome
*    (include `-moz` to future-proof).
*/
input[type='search'] {
  -webkit-appearance: textfield;
  /* 1 */
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/**
* Remove inner padding and search cancel button in Safari and Chrome on OS X.
* Safari (but not Chrome) clips the cancel button when the search input has
* padding (and `textfield` appearance).
*/
input[type='search']::-webkit-search-cancel-button,
input[type='search']::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
* Define consistent border, margin, and padding.
*/
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
* 1. Correct `color` not being inherited in IE 8/9/10/11.
* 2. Remove padding so people aren't caught out if they zero out fieldsets.
*/
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
   * Remove default vertical scrollbar in IE 8/9/10/11.
   */
textarea {
  overflow: auto; }

/**
* Don't inherit the `font-weight` (applied by a rule above).
* NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
*/
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
* Remove most spacing between table cells.
*/
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

.messages:after, nav.tabs:after {
  content: "";
  display: table;
  clear: both; }

.node-preview-container .node-preview-backlink {
  -webkit-transition: all .2s;
  transition: all .2s; }

.region-prefix {
  margin-top: .5rem; }

.messages {
  color: #212B35;
  font-size: .875em;
  margin: 0 !important;
  border-radius: 0;
  -webkit-box-shadow: none;
          box-shadow: none; }
  .messages ul.messages__list {
    margin: 0;
    margin-left: 1rem; }
    .messages ul.messages__list li:not(:first-child) {
      margin-top: .5rem; }
  .messages:before {
    background-color: rgba(0, 0, 0, 0.1);
    border-radius: 1em;
    display: block;
    float: left;
    height: 2em;
    margin-right: 1em;
    margin-left: -1.5rem;
    margin-top: -.3em;
    padding-top: .3rem;
    speak: none;
    text-align: center;
    width: 2em;
    font-family: Arial !important; }
  .messages h2 {
    margin: 0; }
  .messages.messages--status {
    background-color: rgba(92, 187, 70, 0.5);
    background-image: none;
    border: 0; }
    .messages.messages--status:before {
      content: "âœ”"; }
  .messages.messages--warning {
    background-color: rgba(253, 183, 39, 0.5);
    background-image: none;
    border: 0; }
    .messages.messages--warning:before {
      content: "!";
      font-family: Arial !important; }
  .messages.messages--error {
    background-color: rgba(237, 28, 46, 0.5);
    background-image: none;
    border: 0; }
    .messages.messages--error:before {
      content: "!";
      font-family: Arial !important; }

.node-preview-container .node-preview-backlink {
  background-color: #0d324d;
  padding: .5rem;
  color: white;
  text-transform: uppercase;
  font-size: .6rem;
  letter-spacing: .0223em; }
  .node-preview-container .node-preview-backlink:hover {
    background-color: #0c2c44; }

.node-preview-container .form-item-view-mode {
  display: none; }

.ui-datepicker {
  font-family: "Rubik", "Helvetica Neue", Helvetica, Arial, sans-serif;
  border-radius: 0; }

.ui-datepicker-header {
  border-radius: 0; }

.ui-widget-header {
  background: none;
  background-color: #EEEEEE;
  border: 0; }

.ui-state-default,
.ui-widget-content .ui-state-default {
  background: none;
  background-color: #FAFAFA; }

.ui-state-highlight {
  border: 1px solid #deb408 !important; }

#cboxWrapper {
  border-radius: 0; }

.field--name-user-picture img {
  border-radius: 50%; }

h2.styleguide {
  letter-spacing: 2px;
  text-transform: uppercase;
  color: #507b2c;
  font-weight: 600;
  font-size: 0.8rem;
  font-family: "Apex Rounded", "Helvetica Neue", Helvetica, Arial, sans-serif; }

.contextual-links-wrapper a.contextual-links-trigger {
  border-bottom: 1px solid transparent; }

.contextual-links-wrapper ul.contextual-links li a {
  border-bottom: 1px solid transparent; }

nav.tabs {
  margin-top: .5rem;
  margin-bottom: 1rem; }
  nav.tabs li {
    margin: 0;
    padding: 0; }
    nav.tabs li a {
      bottom-bottom: 0 !important;
      color: #2a414f;
      display: block;
      font-size: .6rem;
      padding: .2rem .6em;
      text-transform: uppercase;
      font-weight: 500;
      letter-spacing: 1px;
      border: 2px solid #2e323d;
      background-color: white; }
      nav.tabs li a:hover {
        background-color: #2e323d;
        bottom-bottom: 0 !important;
        color: white; }
  nav.tabs li.is-active a {
    background-color: #2e323d;
    color: white; }
  nav.tabs ul.tabs.primary {
    margin-bottom: 0;
    float: left;
    padding-left: 1rem; }
    @media all and (min-width: 48em) {
      nav.tabs ul.tabs.primary {
        float: right; } }
  nav.tabs ul.tabs.secondary {
    clear: both;
    float: left;
    padding-left: 1rem;
    margin-top: .5rem; }
    @media all and (min-width: 48em) {
      nav.tabs ul.tabs.secondary {
        float: right; } }
    nav.tabs ul.tabs.secondary a {
      font-size: .6rem;
      padding: .1rem .4;
      font-weight: 500; }

.file--general,
.file--application-octet-stream {
  background-image: url(../images/icons/file-exe.svg); }

.file--package-x-generic {
  background-image: url(../images/icons/file-generic.svg); }

.file--x-office-spreadsheet {
  background-image: url(../images/icons/file-xls.svg); }

.file--x-office-document {
  background-image: url(../images/icons/file-doc.svg); }

.file--x-office-presentation {
  background-image: url(../images/icons/file-ppt.svg); }

.file--text-x-script {
  background-image: url(../images/icons/file-js.svg); }

.file--text-html {
  background-image: url(../images/icons/file-html.svg); }

.file--text-plain {
  background-image: url(../images/icons/text-plain.png); }

.file--application-pdf {
  background-image: url(../images/icons/file-pdf.svg); }

.file--application-x-executable {
  background-image: url(../images/icons/file-exe.svg); }

.file--audio {
  background-image: url(../images/icons/file-mp3.svg); }

.file--video {
  background-image: url(../images/icons/file-mp4.svg); }

.file--text {
  background-image: url(../images/icons/file-txt.svg); }

.file--image {
  background-image: url(../images/icons/file-jpg.svg); }

.file--mime-application-postscript {
  background-image: url(../images/icons/file-eps.svg); }

.file {
  background-size: 16px auto;
  background-position: left top; }

a[data-entity-type="file"] {
  position: relative;
  margin-left: 1rem;
  font-weight: 500;
  border-bottom: 1px dotted; }
  a[data-entity-type="file"]:before {
    position: absolute;
    content: ' ';
    width: .75rem;
    height: 1rem;
    left: -.9rem;
    top: .12rem;
    background-image: url(../images/icons/attach-2.svg);
    background-repeat: no-repeat;
    background-size: 1rem 1rem; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
